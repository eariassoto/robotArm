section .data
errFile:	db	"No se pudo abrir el archivo", 10, 0
format:		db	"%d", 10, 0
count:		db	0

section	.bss
buf:	resb	6

section .text	
	extern	shoulderAngle
	extern	elbowAngle
	extern	glutPostRedisplay
	extern	glutTimerFunc
	extern	printf

	global	iniciaCiclo
	global	specialKey

iteracion: ; 1 param, es el fd
	push	ebp
	mov	ebp,	esp
	push	ebx
	push	esi
	
	mov	esi,	[ebp+8]

	mov	eax,	5h ; open code
	mov	ebx,	esi ;mando el param
	mov	ecx,	0 ; read only
	mov	edx,	0777 
	int	80h

	mov	esi,	eax
lseek:
	mov	eax,	13h
	mov	ebx,	esi
	mov	ecx,	2
	mov	edx,	0
	int	80h

	mov	ecx,	count
	add	ecx,	6
	mov	count,	ecx
leaIns:
	mov	eax,	3h ; read code
	mov	ebx,	esi	
	mov	ecx,	buf
	mov	edx,	6
	int	80h

writeIns:
	mov	eax,	4h ; write code
	mov	ebx,	1 ; stdin
	int	80h

	mov	eax,	6h ; close code
	mov	ebx,	esi
	int	80h

	mov	esi,	[ebp+8]
	push	esi
	push	iteracion
	push	1000
	call	glutTimerFunc
	add	esp,	12

	pop	esi
	pop	ebx
	mov	esp,	ebp
	pop	ebp
	ret

iniciaCiclo:
	push	ebp
	mov	ebp,	esp

	mov	count,	0
	mov	ecx,	[ebp+8]	
	push	ecx
	push	iteracion
	push	1000
	call	glutTimerFunc
	add	esp,	12

	mov	eax,	0
	mov	esp,	ebp
	pop	ebp
	ret

specialKey:
	mov	edx,	[esp+4] ; guardo param
	
	cmp	edx,	64h
	jne	case2
	
	;caso left
	mov	ecx,	[elbowAngle]
	add	ecx,	5

	cmp	ecx,	360
	jl	caseElExit
	push	esi
	mov	esi,	0
	jmp	module

case2:
	cmp	edx,	66h
	jne	case3
	
	; caso right
	mov	ecx,	[elbowAngle]
	sub	ecx,	5

	cmp	ecx,	-360
	jg	caseElExit
	push	esi
	mov	esi,	0
	jmp	module

caseElExit:
	mov	[elbowAngle],	ecx
	jmp	exit

case3:
	cmp	edx,	65h
	jne	case4
	
	;caso up
	mov	ecx,	[shoulderAngle]
	add	ecx,	5

	cmp	ecx,	360
	jl	caseShoExit
	push	esi
	mov	esi,	1
	jmp	module

case4:
	cmp	edx,	67h
	jne	def
	
;case down
	mov	ecx,	[shoulderAngle]
	sub	ecx,	5

	cmp	ecx,	-360
	jg	caseShoExit
	push	esi
	mov	esi,	1
	jmp	module

caseShoExit:
	mov	[shoulderAngle],	ecx
	jmp	exit

def:
	mov	eax,	0
	ret

module:
	push	ebx
	mov	edx,	-1240768329
	mov	eax,	ecx
	imul	edx
	lea	eax,	[edx+ecx]
	mov	edx,	eax
	sar	edx,	8
	mov	eax,	ecx
	sar	eax,	31
	mov	ebx,	edx
	sub	ebx,	eax
	mov	eax,	ebx
	imul	eax,	eax,	360
	mov	edx,	ecx
	sub	edx,	eax
	cmp	esi,	1
	je	caseSho
caseEl:
	mov	[elbowAngle],	edx
	jmp	modExit
caseSho:
	mov	[shoulderAngle],	edx
	jmp	modExit
modExit:
	pop	ebx
	pop	esi	
	jmp	exit

exit:
	call	glutPostRedisplay
	mov	eax,	0
	ret
